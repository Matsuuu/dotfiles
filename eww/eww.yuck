; TODO: Lift stuff from e.g. here https://github.com/gh0stzk/dotfiles/blob/4ac2722d8fedac96d1415d8d78883e03c0d797a7/config/bspwm/rices/z0mbi3/bar/eww.yuck
; And maybe https://github.com/adi1090x/widgets/blob/main/eww/arin/eww.yuck

(defvar power false)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :stacking "fg"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :anchor "top left")
  :reserve (struts :side "top" :distance "4%")
  (box
    (box
      :halign "start"
      :space-evenly false
      (workspace-win)
      (music-win)
    )
    (box
      :space-evenly false
      :halign "end"
      (specs-win)
      (date-win)
      (power-win)
      )
  )
)

(defwidget workspace-win []
  (box :space-evenly false :class "left-box content-box" :valign "center"
        (workspaces)
        (systemtray)
      )
  )

(defwidget music-win []
  (box 
    :visible { music != ""}
    :space-evenly false :class "content-box" :valign "center"
        (music)
      )
  )

(defwidget specs-win []
  (box :space-evenly false :class "content-box" :valign "center"
    (wifi)
    (metric :label "ðŸ”Š"
            :value volume
            :tooltip volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ðŸ’¿"
            :value {EWW_RAM.used_mem_perc}
            :tooltip "${round(EWW_RAM.used_mem / 1000000000, 2)} / ${round(EWW_RAM.total_mem / 1000000000, 2)}"
            :onchange "")
    (battery)
      )
  )

(defwidget date-win []
  (box :space-evenly false :class "content-box" :valign "center"
        (datetime)
      )
  )

(defwidget power-win []
    (powermenu)
)

(defwidget datetime []
  (box :class "datetime" :orientation "v" :halign "start" :valign "center" :space-evenly false
    (label :class "datetime-time" :text time :halign "start")
    (label :class "datetime-date" :text date :halign "start")
  ))

(defwidget battery []
    ; TODO: Charging status
    (box :orientation "h" 
         :visible { EWW_BATTERY != "" } 
         :class "metric"
         :space-evenly false
          (box :class "label" "ðŸ”‹")
          (scale :min 0
                 :max 100
                 :value {EWW_BATTERY == "" ? 0 : EWW_BATTERY}
                 )))

(defwidget wifi []
	(box :orientation "v"
		(eventbox :cursor "pointer"
			(button
					:class "trayicon"
					:tooltip "${NETSTAT}"
              (box :orientation "h" :class "networkbutton" :spacing 5 :space-evenly false
                (image 
                  :path WIFIICON 
                  :image-width 16 
                  :image-height 16)
                NETSTAT
              )
			)
		)
	)
)


(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (for ws in currentworkspaces
      (eventbox 
        :cursor "pointer"
        (button 
          :class { ws.focused ? "active" : "inactive" }
          :onclick "wmctrl -s ${ws.num - 1}" 
        "${ws.num}"))
      )
    ))

(defwidget music []
  (box
    :visible { music != ""}
    :space-evenly false
    (box :class "music"
         :space-evenly false
        (image :class "music-image" :path "images/compact-disc.png" :image-width 25 :valign "center")
        (box 
         :orientation "v"
         :space-evenly false
         :halign "start"
        :valign "center"
        (label :class "music-artist" :text "${music.artist}" :halign "start")
        (label :class "music-title" :text "${music.title}" :truncate true :limit-width 30 :halign "start")
      )
    )
    (box 
      :class "music-controls" 
      :space-evenly false
      :valign "center"
      (eventbox :cursor "pointer"
        (button 
              :class "music-control-button"
              :style "background-image: url('images/rewind.png');"
              :tooltip "Play"
              :onclick "playerctl previous"))
      (eventbox :cursor "pointer"
        (button 
              :class "music-control-button"
              :style "background-image: url('images/play-button.png');"
              :tooltip "Play"
              :onclick "playerctl play-pause"))
      (eventbox :cursor "pointer"
        (button 
              :class "music-control-button"
              :style "background-image: url('images/fast-forward.png');"
              :tooltip "Play"
              :onclick "playerctl next"))
      )
  )
)


(defwidget metric [label value tooltip onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" :tooltip tooltip label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget systemtray []
  (box :orientation "v" :halign "start"
    (systray :class "tray" :orientation "h" :icon-size 16 :spacing 5)
  )
)

(defwidget powermenu []
  (box :orientation "v" :halign "start" :class "powermenu-wrap" :space-evenly false
	(eventbox	:onhover "${EWW_CMD} update power=true"
				:onhoverlost "${EWW_CMD} update power=false"
				:cursor "pointer"

	(box	:orientation "h"
			:space-evenly false
			:vexpand false
			:class "powermenu"

	(revealer	:transition "slideleft"
				:reveal power
				:duration "550ms"

	(box	:orientation "h"
			:space-evenly false

      ; Commented for now due to it being quite broken
	; (button	:style "background-image: url('images/exit.png');"
	; 		:class "powermenu-button"
	; 		:tooltip "Log out"
	; 		:onclick "qdbus org.kde.Shutdown /Shutdown logout")

	(button	:style "background-image: url('images/padlock.png');"
			:class "powermenu-button"
			:tooltip "Lock Screen"
			:onclick "sudo -i loginctl lock-sessions")

	(button :style "background-image: url('images/moon.png');"
			:class "powermenu-button"
			:tooltip "Suspend computer"
			:onclick "systemctl suspend")

	(button	:style "background-image: url('images/restart.png');"
			:class "powermenu-button"
	  		:tooltip "Reboot"
			:onclick "reboot")
    ))

	(button	:style "background-image: url('images/power-button.png');"
			:class "powermenu-button powermenu-main-button"
			:tooltip "Power Menu"
            :onclick "shutdown now"
      ))
    )
))

;;; Polls

(deflisten music :initial ""
  "playerctl --follow metadata --format '{ \"artist\": \"{{ artist }}\", \"title\": \"{{ title }}\", \"image\": \"{{ mpris:artUrl }}\"  }' --player=plasma-browser-integration || true")

(defpoll volume :interval "1s"
  "scripts/getvol.sh")

(defpoll currentworkspaces :interval "1s"
   "scripts/workspaces.sh")

(defpoll date :interval "10s"
  "date '+%A, %d %B'")

(defpoll time :interval "10s"
  "date '+%H:%M'")

;; Network
(defpoll WIFIICON :interval "15s" `scripts/network.sh --icon`)
(defpoll NETSTAT :interval "15s" `scripts/network.sh --stat`)
