; TODO: Lift stuff from e.g. here https://github.com/gh0stzk/dotfiles/blob/4ac2722d8fedac96d1415d8d78883e03c0d797a7/config/bspwm/rices/z0mbi3/bar/eww.yuck

;; Network
(defpoll WIFIICON :interval "15s" `scripts/network.sh --icon`)
(defpoll NETSTAT :interval "15s" `scripts/network.sh --stat`)

(defvar power false)

(defwidget bar []
  (centerbox :class "centerbox" :orientation "h"
    (leftside)
    (music)
    (sidestuff)))

(defwidget leftside []
  (box :space-evenly false :class "left-box"
        (workspaces)
        (systemtray)
      )
    )

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (powermenu)
    (wifi)
    (metric :label "ðŸ”Š"
            :value volume
            :onchange "amixer -D pulse sset Master {}%")
    (metric :label "ðŸ’¿"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (battery)
    time
    ))

(defwidget battery []
    ; TODO: Charging status
    (box :orientation "h" 
         :visible { EWW_BATTERY != "" } 
         :class "metric"
         :space-evenly false
          (box :class "label" "ðŸ”‹")
          (scale :min 0
                 :max 100
                 :value {EWW_BATTERY == "" ? 0 : EWW_BATTERY}
                 )))

(defwidget wifi []
	(box :orientation "v"
		(eventbox :cursor "pointer"
			(button
					:class "trayicon"
					:tooltip "${NETSTAT}"
              (box :orientation "h" :class "networkbutton" :spacing 5 :space-evenly false
                (image 
                  :path WIFIICON 
                  :image-width 16 
                  :image-height 16)
                NETSTAT
              )
			)
		)
	)
)


(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 10
    (for ws in currentworkspaces
      (eventbox 
        :cursor "pointer"
        (button 
          :class { ws.focused ? "active" : "inactive" }
        :onclick "wmctrl -s ${ws.num - 1}" 
        "${ws.num}"))
      )
    ))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget systemtray []
  (box :orientation "v" :halign "start"
    (systray :class "tray" :orientation "h" :icon-size 16 :spacing 5)
  )
)

(defwidget powermenu []
	(eventbox	:onhover "${EWW_CMD} update power=true"
				:onhoverlost "${EWW_CMD} update power=false"
				:cursor "pointer"

	(box	:orientation "h"
			:space-evenly "false"
			:vexpand "false"
			:class "powermenu"

	(revealer	:transition "slideleft"
				:reveal power
				:duration "550ms"

	(box	:orientation "h"
			:space-evenly "false"

	(button	:style "background-image: url('images/enpass.png');"
			:class "button-lock"
			:tooltip "Lock Screen"
			:onclick "qdbus org.kde.Shutdown /Shutdown logout")

	(button :style "background-image: url('images/sys-sleep.png');"
			:class "button-bspres"
			:tooltip "Suspend computer"
			:onclick "systemctl suspend")

	(button	:style "background-image: url('images/sys-reboot.png');"
			:class "button-reb"
	  		:tooltip "Reboot"
			:onclick "reboot")

	(button	:style "background-image: url('images/sys-poweroff.png');"
			:class "button-off"
			:tooltip "Shutdown"
			:onclick "shutdown now")))

	(button	:style "background-image: url('images/sys-powermenu.png');"
			:class "button-powermenu"
			:tooltip "Power Menu"))))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol.sh")

(defpoll currentworkspaces :interval "1s"
   "scripts/workspaces.sh")

(defpoll time :interval "10s"
  "date '+%b %d %Y - %H:%M'")

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "0%"
                      :width "0"
                      :height "0"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
